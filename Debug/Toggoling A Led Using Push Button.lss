
Toggoling A Led Using Push Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000067a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000006ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d2a  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000800  00000000  00000000  000015ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005be  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b4  00000000  00000000  000029e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00002f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  74:	0c 94 3b 03 	jmp	0x676	; 0x676 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_toggle>:
	if (port >= A && port <= D)
	{
		reg = (uint8_t*)(GPIO_DATA_R - (port - A));
		if ( bit >= 0 && bit <= 7 )
		{
			GPIO_CLEAR(reg, bit);
  7c:	8a 30       	cpi	r24, 0x0A	; 10
  7e:	80 f4       	brcc	.+32     	; 0xa0 <GPIO_toggle+0x24>
  80:	eb e3       	ldi	r30, 0x3B	; 59
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	e8 1b       	sub	r30, r24
  86:	f1 09       	sbc	r31, r1
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	50 f4       	brcc	.+20     	; 0xa0 <GPIO_toggle+0x24>
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <GPIO_toggle+0x1a>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	6a 95       	dec	r22
  98:	e2 f7       	brpl	.-8      	; 0x92 <GPIO_toggle+0x16>
  9a:	90 81       	ld	r25, Z
  9c:	89 27       	eor	r24, r25
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <GPIO_dir>:
  a2:	8a 30       	cpi	r24, 0x0A	; 10
  a4:	08 f5       	brcc	.+66     	; 0xe8 <GPIO_dir+0x46>
  a6:	2a e3       	ldi	r18, 0x3A	; 58
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	e8 1b       	sub	r30, r24
  ae:	f1 09       	sbc	r31, r1
  b0:	68 30       	cpi	r22, 0x08	; 8
  b2:	d0 f4       	brcc	.+52     	; 0xe8 <GPIO_dir+0x46>
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <GPIO_dir+0x2c>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <GPIO_dir+0x20>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <GPIO_dir+0x1c>
  c6:	90 81       	ld	r25, Z
  c8:	89 2b       	or	r24, r25
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret
  ce:	41 11       	cpse	r20, r1
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <GPIO_dir+0x46>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_dir+0x3a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_dir+0x36>
  e0:	80 95       	com	r24
  e2:	90 81       	ld	r25, Z
  e4:	89 23       	and	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <GPIO_read>:
}

uint8_t GPIO_read(uint8_t port, uint8_t bit)
{
	uint8_t* reg;
	if (port >= A && port <= D)
  ea:	8a 30       	cpi	r24, 0x0A	; 10
  ec:	d8 f4       	brcc	.+54     	; 0x124 <GPIO_read+0x3a>
	{
		reg = (uint8_t*)(GPIO_BITS_R - (port - A));
  ee:	e9 e3       	ldi	r30, 0x39	; 57
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e8 1b       	sub	r30, r24
  f4:	f1 09       	sbc	r31, r1
		if (GPIO_IS_SET(reg,bit))
  f6:	40 81       	ld	r20, Z
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	9c 01       	movw	r18, r24
  fe:	06 2e       	mov	r0, r22
 100:	02 c0       	rjmp	.+4      	; 0x106 <GPIO_read+0x1c>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <GPIO_read+0x18>
 10a:	84 2f       	mov	r24, r20
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	82 23       	and	r24, r18
 110:	93 23       	and	r25, r19
 112:	02 c0       	rjmp	.+4      	; 0x118 <GPIO_read+0x2e>
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <GPIO_read+0x2a>
 11c:	89 2b       	or	r24, r25
 11e:	21 f4       	brne	.+8      	; 0x128 <GPIO_read+0x3e>
		{
			return 1;
		}
	}
	return 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret
	if (port >= A && port <= D)
	{
		reg = (uint8_t*)(GPIO_BITS_R - (port - A));
		if (GPIO_IS_SET(reg,bit))
		{
			return 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
 12a:	08 95       	ret

0000012c <LED_en>:
	GPIO_set(port,bit);
}

void LED_off(uint8_t port, uint8_t bit)
{
	GPIO_clear(port,bit);
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	0e 94 51 00 	call	0xa2	; 0xa2 <GPIO_dir>
 132:	08 95       	ret

00000134 <LED_toggle>:
}

void LED_toggle (uint8_t port, uint8_t bit)
{
	GPIO_toggle(port,bit);
 134:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_toggle>
 138:	08 95       	ret

0000013a <main>:
#include "PUSH_button.h"
#include "Timers.h"

int main(void)
{
	LED_en(B,4);
 13a:	64 e0       	ldi	r22, 0x04	; 4
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 96 00 	call	0x12c	; 0x12c <LED_en>
	BUTTON_en(B,2);
 142:	62 e0       	ldi	r22, 0x02	; 2
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 b4 00 	call	0x168	; 0x168 <BUTTON_en>
    
	while (1) 
    {
		if(1 == BUTTON_status(B,2))
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 b8 00 	call	0x170	; 0x170 <BUTTON_status>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	d1 f7       	brne	.-12     	; 0x14a <main+0x10>
		{
			LED_toggle(B,4);
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <LED_toggle>
			TIMER0_msdelay(500);
 15e:	84 ef       	ldi	r24, 0xF4	; 244
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 1b 01 	call	0x236	; 0x236 <TIMER0_msdelay>
 166:	f1 cf       	rjmp	.-30     	; 0x14a <main+0x10>

00000168 <BUTTON_en>:
#include "GPIO.h"

void BUTTON_en(uint8_t port, uint8_t bit)
{
	GPIO_dir(port,bit,INPUT);
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	0e 94 51 00 	call	0xa2	; 0xa2 <GPIO_dir>
 16e:	08 95       	ret

00000170 <BUTTON_status>:
}

uint8_t BUTTON_status(uint8_t port, uint8_t bit)
{
	uint8_t value = GPIO_read(port,bit); 
 170:	0e 94 75 00 	call	0xea	; 0xea <GPIO_read>
	return value;
 174:	08 95       	ret

00000176 <__vector_11>:
}

void OCI2_init(void)
{
	BIT_SET(TIMSK_R,7);
	BIT_SET(STATUS_R,7);
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 190:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 194:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	a1 1d       	adc	r26, r1
 19c:	b1 1d       	adc	r27, r1
 19e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1aa:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <OVI0_init>:
 1c0:	89 b7       	in	r24, 0x39	; 57
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	89 bf       	out	0x39, r24	; 57
 1c6:	8f b7       	in	r24, 0x3f	; 63
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8f bf       	out	0x3f, r24	; 63
 1cc:	08 95       	ret

000001ce <TIMER0_start>:
	counts = 0; 
}

void TIMER0_start(uint16_t u16_prescale)
{
	if (1 == u16_prescale)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	21 f4       	brne	.+8      	; 0x1dc <TIMER0_start+0xe>
	{
		TIMER0_CTL_R |= (1<<CS00);
 1d4:	83 b7       	in	r24, 0x33	; 51
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	83 bf       	out	0x33, r24	; 51
 1da:	08 95       	ret
	}
	else if (8 == u16_prescale)
 1dc:	88 30       	cpi	r24, 0x08	; 8
 1de:	91 05       	cpc	r25, r1
 1e0:	21 f4       	brne	.+8      	; 0x1ea <TIMER0_start+0x1c>
	{
		TIMER0_CTL_R |= (1<<CS01);	
 1e2:	83 b7       	in	r24, 0x33	; 51
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	83 bf       	out	0x33, r24	; 51
 1e8:	08 95       	ret
	}
	else if (32 == u16_prescale)
 1ea:	80 32       	cpi	r24, 0x20	; 32
 1ec:	91 05       	cpc	r25, r1
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <TIMER0_start+0x2a>
	{
		TIMER0_CTL_R |= (1<<CS01) | (1<<CS00);
 1f0:	83 b7       	in	r24, 0x33	; 51
 1f2:	83 60       	ori	r24, 0x03	; 3
 1f4:	83 bf       	out	0x33, r24	; 51
 1f6:	08 95       	ret
	}
	else if (64 == u16_prescale)
 1f8:	80 34       	cpi	r24, 0x40	; 64
 1fa:	91 05       	cpc	r25, r1
 1fc:	21 f4       	brne	.+8      	; 0x206 <TIMER0_start+0x38>
	{
		TIMER0_CTL_R |= (1<<CS02);
 1fe:	83 b7       	in	r24, 0x33	; 51
 200:	84 60       	ori	r24, 0x04	; 4
 202:	83 bf       	out	0x33, r24	; 51
 204:	08 95       	ret
	}
	else if (128 == u16_prescale)
 206:	80 38       	cpi	r24, 0x80	; 128
 208:	91 05       	cpc	r25, r1
 20a:	21 f4       	brne	.+8      	; 0x214 <TIMER0_start+0x46>
	{
		TIMER0_CTL_R |= (1<<CS02) | (1<<CS00);
 20c:	83 b7       	in	r24, 0x33	; 51
 20e:	85 60       	ori	r24, 0x05	; 5
 210:	83 bf       	out	0x33, r24	; 51
 212:	08 95       	ret
	}
	else if (256 == u16_prescale)
 214:	81 15       	cp	r24, r1
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	92 07       	cpc	r25, r18
 21a:	21 f4       	brne	.+8      	; 0x224 <TIMER0_start+0x56>
	{
		TIMER0_CTL_R |= (1<<CS02) | (1<<CS01);
 21c:	83 b7       	in	r24, 0x33	; 51
 21e:	86 60       	ori	r24, 0x06	; 6
 220:	83 bf       	out	0x33, r24	; 51
 222:	08 95       	ret
	}
	else if (1024 == u16_prescale)
 224:	81 15       	cp	r24, r1
 226:	94 40       	sbci	r25, 0x04	; 4
 228:	19 f4       	brne	.+6      	; 0x230 <TIMER0_start+0x62>
	{
		TIMER0_CTL_R |= (1<<CS02) | (1<<CS01) | (1<<CS00);
 22a:	83 b7       	in	r24, 0x33	; 51
 22c:	87 60       	ori	r24, 0x07	; 7
 22e:	83 bf       	out	0x33, r24	; 51
 230:	08 95       	ret

00000232 <TIMER0_stop>:
	}
}

void TIMER0_stop(void)
{
	TIMER0_CTL_R = 0;
 232:	13 be       	out	0x33, r1	; 51
 234:	08 95       	ret

00000236 <TIMER0_msdelay>:
	BIT_SET(TIMSK_R,7);
	BIT_SET(STATUS_R,7);
}

void TIMER0_msdelay(uint16_t mseconds)
{	
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	00 d0       	rcall	.+0      	; 0x244 <TIMER0_msdelay+0xe>
 244:	00 d0       	rcall	.+0      	; 0x246 <TIMER0_msdelay+0x10>
 246:	00 d0       	rcall	.+0      	; 0x248 <TIMER0_msdelay+0x12>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;
	volatile uint16_t remainder;
	ticks     = ( ( mseconds / 0.001 ) / 255 );
 24c:	bc 01       	movw	r22, r24
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 93 02 	call	0x526	; 0x526 <__floatunsisf>
 256:	2f e6       	ldi	r18, 0x6F	; 111
 258:	32 e1       	ldi	r19, 0x12	; 18
 25a:	43 e8       	ldi	r20, 0x83	; 131
 25c:	5a e3       	ldi	r21, 0x3A	; 58
 25e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divsf3>
 262:	6b 01       	movw	r12, r22
 264:	7c 01       	movw	r14, r24
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	4f e7       	ldi	r20, 0x7F	; 127
 26c:	53 e4       	ldi	r21, 0x43	; 67
 26e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__divsf3>
 272:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fixunssfsi>
 276:	69 83       	std	Y+1, r22	; 0x01
 278:	7a 83       	std	Y+2, r23	; 0x02
 27a:	8b 83       	std	Y+3, r24	; 0x03
 27c:	9c 83       	std	Y+4, r25	; 0x04
	remainder = ((mseconds / 0.001) - ( ticks * 255 ));  //Calculating the remaining fraction of clock cycles
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	3a 81       	ldd	r19, Y+2	; 0x02
 282:	4b 81       	ldd	r20, Y+3	; 0x03
 284:	5c 81       	ldd	r21, Y+4	; 0x04
 286:	af ef       	ldi	r26, 0xFF	; 255
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	0e 94 21 03 	call	0x642	; 0x642 <__muluhisi3>
 28e:	0e 94 93 02 	call	0x526	; 0x526 <__floatunsisf>
 292:	9b 01       	movw	r18, r22
 294:	ac 01       	movw	r20, r24
 296:	c7 01       	movw	r24, r14
 298:	b6 01       	movw	r22, r12
 29a:	0e 94 85 01 	call	0x30a	; 0x30a <__subsf3>
 29e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fixunssfsi>
 2a2:	7e 83       	std	Y+6, r23	; 0x06
 2a4:	6d 83       	std	Y+5, r22	; 0x05
	OVI0_init(); // Enabling system interrupt and flag for overflow int timer 0
 2a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OVI0_init>
	TIMER0_start(8); // prescaler of one that yields 8MHz frequency
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <TIMER0_start>
	while (counts < ticks)
 2b2:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b6:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ba:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2be:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	ab 81       	ldd	r26, Y+3	; 0x03
 2c8:	bc 81       	ldd	r27, Y+4	; 0x04
 2ca:	48 17       	cp	r20, r24
 2cc:	59 07       	cpc	r21, r25
 2ce:	6a 07       	cpc	r22, r26
 2d0:	7b 07       	cpc	r23, r27
 2d2:	78 f3       	brcs	.-34     	; 0x2b2 <TIMER0_msdelay+0x7c>
	{
		//Stay here till reaching the overflow counts that corresponds to the required delay
	}
	TIMER0_CNT_R = (255-remainder); //Compensation of ticks remaining fraction to increase accuracy
 2d4:	8d 81       	ldd	r24, Y+5	; 0x05
 2d6:	9e 81       	ldd	r25, Y+6	; 0x06
 2d8:	80 95       	com	r24
 2da:	82 bf       	out	0x32, r24	; 50
	TIMER0_stop();
 2dc:	0e 94 19 01 	call	0x232	; 0x232 <TIMER0_stop>
	counts = 0; 
 2e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2e8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2ec:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 2f0:	26 96       	adiw	r28, 0x06	; 6
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	cf 90       	pop	r12
 308:	08 95       	ret

0000030a <__subsf3>:
 30a:	50 58       	subi	r21, 0x80	; 128

0000030c <__addsf3>:
 30c:	bb 27       	eor	r27, r27
 30e:	aa 27       	eor	r26, r26
 310:	0e 94 9d 01 	call	0x33a	; 0x33a <__addsf3x>
 314:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_round>
 318:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscA>
 31c:	38 f0       	brcs	.+14     	; 0x32c <__addsf3+0x20>
 31e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscB>
 322:	20 f0       	brcs	.+8      	; 0x32c <__addsf3+0x20>
 324:	39 f4       	brne	.+14     	; 0x334 <__addsf3+0x28>
 326:	9f 3f       	cpi	r25, 0xFF	; 255
 328:	19 f4       	brne	.+6      	; 0x330 <__addsf3+0x24>
 32a:	26 f4       	brtc	.+8      	; 0x334 <__addsf3+0x28>
 32c:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_nan>
 330:	0e f4       	brtc	.+2      	; 0x334 <__addsf3+0x28>
 332:	e0 95       	com	r30
 334:	e7 fb       	bst	r30, 7
 336:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>

0000033a <__addsf3x>:
 33a:	e9 2f       	mov	r30, r25
 33c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_split3>
 340:	58 f3       	brcs	.-42     	; 0x318 <__addsf3+0xc>
 342:	ba 17       	cp	r27, r26
 344:	62 07       	cpc	r22, r18
 346:	73 07       	cpc	r23, r19
 348:	84 07       	cpc	r24, r20
 34a:	95 07       	cpc	r25, r21
 34c:	20 f0       	brcs	.+8      	; 0x356 <__addsf3x+0x1c>
 34e:	79 f4       	brne	.+30     	; 0x36e <__addsf3x+0x34>
 350:	a6 f5       	brtc	.+104    	; 0x3ba <__addsf3x+0x80>
 352:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_zero>
 356:	0e f4       	brtc	.+2      	; 0x35a <__addsf3x+0x20>
 358:	e0 95       	com	r30
 35a:	0b 2e       	mov	r0, r27
 35c:	ba 2f       	mov	r27, r26
 35e:	a0 2d       	mov	r26, r0
 360:	0b 01       	movw	r0, r22
 362:	b9 01       	movw	r22, r18
 364:	90 01       	movw	r18, r0
 366:	0c 01       	movw	r0, r24
 368:	ca 01       	movw	r24, r20
 36a:	a0 01       	movw	r20, r0
 36c:	11 24       	eor	r1, r1
 36e:	ff 27       	eor	r31, r31
 370:	59 1b       	sub	r21, r25
 372:	99 f0       	breq	.+38     	; 0x39a <__addsf3x+0x60>
 374:	59 3f       	cpi	r21, 0xF9	; 249
 376:	50 f4       	brcc	.+20     	; 0x38c <__addsf3x+0x52>
 378:	50 3e       	cpi	r21, 0xE0	; 224
 37a:	68 f1       	brcs	.+90     	; 0x3d6 <__addsf3x+0x9c>
 37c:	1a 16       	cp	r1, r26
 37e:	f0 40       	sbci	r31, 0x00	; 0
 380:	a2 2f       	mov	r26, r18
 382:	23 2f       	mov	r18, r19
 384:	34 2f       	mov	r19, r20
 386:	44 27       	eor	r20, r20
 388:	58 5f       	subi	r21, 0xF8	; 248
 38a:	f3 cf       	rjmp	.-26     	; 0x372 <__addsf3x+0x38>
 38c:	46 95       	lsr	r20
 38e:	37 95       	ror	r19
 390:	27 95       	ror	r18
 392:	a7 95       	ror	r26
 394:	f0 40       	sbci	r31, 0x00	; 0
 396:	53 95       	inc	r21
 398:	c9 f7       	brne	.-14     	; 0x38c <__addsf3x+0x52>
 39a:	7e f4       	brtc	.+30     	; 0x3ba <__addsf3x+0x80>
 39c:	1f 16       	cp	r1, r31
 39e:	ba 0b       	sbc	r27, r26
 3a0:	62 0b       	sbc	r22, r18
 3a2:	73 0b       	sbc	r23, r19
 3a4:	84 0b       	sbc	r24, r20
 3a6:	ba f0       	brmi	.+46     	; 0x3d6 <__addsf3x+0x9c>
 3a8:	91 50       	subi	r25, 0x01	; 1
 3aa:	a1 f0       	breq	.+40     	; 0x3d4 <__addsf3x+0x9a>
 3ac:	ff 0f       	add	r31, r31
 3ae:	bb 1f       	adc	r27, r27
 3b0:	66 1f       	adc	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	c2 f7       	brpl	.-16     	; 0x3a8 <__addsf3x+0x6e>
 3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <__addsf3x+0x9c>
 3ba:	ba 0f       	add	r27, r26
 3bc:	62 1f       	adc	r22, r18
 3be:	73 1f       	adc	r23, r19
 3c0:	84 1f       	adc	r24, r20
 3c2:	48 f4       	brcc	.+18     	; 0x3d6 <__addsf3x+0x9c>
 3c4:	87 95       	ror	r24
 3c6:	77 95       	ror	r23
 3c8:	67 95       	ror	r22
 3ca:	b7 95       	ror	r27
 3cc:	f7 95       	ror	r31
 3ce:	9e 3f       	cpi	r25, 0xFE	; 254
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <__addsf3x+0x9a>
 3d2:	b0 cf       	rjmp	.-160    	; 0x334 <__addsf3+0x28>
 3d4:	93 95       	inc	r25
 3d6:	88 0f       	add	r24, r24
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <__addsf3x+0xa2>
 3da:	99 27       	eor	r25, r25
 3dc:	ee 0f       	add	r30, r30
 3de:	97 95       	ror	r25
 3e0:	87 95       	ror	r24
 3e2:	08 95       	ret

000003e4 <__divsf3>:
 3e4:	0e 94 06 02 	call	0x40c	; 0x40c <__divsf3x>
 3e8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_round>
 3ec:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscB>
 3f0:	58 f0       	brcs	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscA>
 3f6:	40 f0       	brcs	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f8:	29 f4       	brne	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	29 f0       	breq	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fe:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 402:	51 11       	cpse	r21, r1
 404:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 408:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_nan>

0000040c <__divsf3x>:
 40c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_split3>
 410:	68 f3       	brcs	.-38     	; 0x3ec <__divsf3+0x8>

00000412 <__divsf3_pse>:
 412:	99 23       	and	r25, r25
 414:	b1 f3       	breq	.-20     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 416:	55 23       	and	r21, r21
 418:	91 f3       	breq	.-28     	; 0x3fe <__divsf3+0x1a>
 41a:	95 1b       	sub	r25, r21
 41c:	55 0b       	sbc	r21, r21
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	62 17       	cp	r22, r18
 424:	73 07       	cpc	r23, r19
 426:	84 07       	cpc	r24, r20
 428:	38 f0       	brcs	.+14     	; 0x438 <__divsf3_pse+0x26>
 42a:	9f 5f       	subi	r25, 0xFF	; 255
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	44 1f       	adc	r20, r20
 434:	aa 1f       	adc	r26, r26
 436:	a9 f3       	breq	.-22     	; 0x422 <__divsf3_pse+0x10>
 438:	35 d0       	rcall	.+106    	; 0x4a4 <__divsf3_pse+0x92>
 43a:	0e 2e       	mov	r0, r30
 43c:	3a f0       	brmi	.+14     	; 0x44c <__divsf3_pse+0x3a>
 43e:	e0 e8       	ldi	r30, 0x80	; 128
 440:	32 d0       	rcall	.+100    	; 0x4a6 <__divsf3_pse+0x94>
 442:	91 50       	subi	r25, 0x01	; 1
 444:	50 40       	sbci	r21, 0x00	; 0
 446:	e6 95       	lsr	r30
 448:	00 1c       	adc	r0, r0
 44a:	ca f7       	brpl	.-14     	; 0x43e <__divsf3_pse+0x2c>
 44c:	2b d0       	rcall	.+86     	; 0x4a4 <__divsf3_pse+0x92>
 44e:	fe 2f       	mov	r31, r30
 450:	29 d0       	rcall	.+82     	; 0x4a4 <__divsf3_pse+0x92>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	bb 1f       	adc	r27, r27
 45a:	26 17       	cp	r18, r22
 45c:	37 07       	cpc	r19, r23
 45e:	48 07       	cpc	r20, r24
 460:	ab 07       	cpc	r26, r27
 462:	b0 e8       	ldi	r27, 0x80	; 128
 464:	09 f0       	breq	.+2      	; 0x468 <__divsf3_pse+0x56>
 466:	bb 0b       	sbc	r27, r27
 468:	80 2d       	mov	r24, r0
 46a:	bf 01       	movw	r22, r30
 46c:	ff 27       	eor	r31, r31
 46e:	93 58       	subi	r25, 0x83	; 131
 470:	5f 4f       	sbci	r21, 0xFF	; 255
 472:	3a f0       	brmi	.+14     	; 0x482 <__divsf3_pse+0x70>
 474:	9e 3f       	cpi	r25, 0xFE	; 254
 476:	51 05       	cpc	r21, r1
 478:	78 f0       	brcs	.+30     	; 0x498 <__divsf3_pse+0x86>
 47a:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 47e:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_szero>
 482:	5f 3f       	cpi	r21, 0xFF	; 255
 484:	e4 f3       	brlt	.-8      	; 0x47e <__divsf3_pse+0x6c>
 486:	98 3e       	cpi	r25, 0xE8	; 232
 488:	d4 f3       	brlt	.-12     	; 0x47e <__divsf3_pse+0x6c>
 48a:	86 95       	lsr	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f7 95       	ror	r31
 494:	9f 5f       	subi	r25, 0xFF	; 255
 496:	c9 f7       	brne	.-14     	; 0x48a <__divsf3_pse+0x78>
 498:	88 0f       	add	r24, r24
 49a:	91 1d       	adc	r25, r1
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	97 f9       	bld	r25, 7
 4a2:	08 95       	ret
 4a4:	e1 e0       	ldi	r30, 0x01	; 1
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	bb 1f       	adc	r27, r27
 4ae:	62 17       	cp	r22, r18
 4b0:	73 07       	cpc	r23, r19
 4b2:	84 07       	cpc	r24, r20
 4b4:	ba 07       	cpc	r27, r26
 4b6:	20 f0       	brcs	.+8      	; 0x4c0 <__divsf3_pse+0xae>
 4b8:	62 1b       	sub	r22, r18
 4ba:	73 0b       	sbc	r23, r19
 4bc:	84 0b       	sbc	r24, r20
 4be:	ba 0b       	sbc	r27, r26
 4c0:	ee 1f       	adc	r30, r30
 4c2:	88 f7       	brcc	.-30     	; 0x4a6 <__divsf3_pse+0x94>
 4c4:	e0 95       	com	r30
 4c6:	08 95       	ret

000004c8 <__fixunssfsi>:
 4c8:	0e 94 00 03 	call	0x600	; 0x600 <__fp_splitA>
 4cc:	88 f0       	brcs	.+34     	; 0x4f0 <__fixunssfsi+0x28>
 4ce:	9f 57       	subi	r25, 0x7F	; 127
 4d0:	98 f0       	brcs	.+38     	; 0x4f8 <__fixunssfsi+0x30>
 4d2:	b9 2f       	mov	r27, r25
 4d4:	99 27       	eor	r25, r25
 4d6:	b7 51       	subi	r27, 0x17	; 23
 4d8:	b0 f0       	brcs	.+44     	; 0x506 <__fixunssfsi+0x3e>
 4da:	e1 f0       	breq	.+56     	; 0x514 <__fixunssfsi+0x4c>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	1a f0       	brmi	.+6      	; 0x4ec <__fixunssfsi+0x24>
 4e6:	ba 95       	dec	r27
 4e8:	c9 f7       	brne	.-14     	; 0x4dc <__fixunssfsi+0x14>
 4ea:	14 c0       	rjmp	.+40     	; 0x514 <__fixunssfsi+0x4c>
 4ec:	b1 30       	cpi	r27, 0x01	; 1
 4ee:	91 f0       	breq	.+36     	; 0x514 <__fixunssfsi+0x4c>
 4f0:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_zero>
 4f4:	b1 e0       	ldi	r27, 0x01	; 1
 4f6:	08 95       	ret
 4f8:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_zero>
 4fc:	67 2f       	mov	r22, r23
 4fe:	78 2f       	mov	r23, r24
 500:	88 27       	eor	r24, r24
 502:	b8 5f       	subi	r27, 0xF8	; 248
 504:	39 f0       	breq	.+14     	; 0x514 <__fixunssfsi+0x4c>
 506:	b9 3f       	cpi	r27, 0xF9	; 249
 508:	cc f3       	brlt	.-14     	; 0x4fc <__fixunssfsi+0x34>
 50a:	86 95       	lsr	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b3 95       	inc	r27
 512:	d9 f7       	brne	.-10     	; 0x50a <__fixunssfsi+0x42>
 514:	3e f4       	brtc	.+14     	; 0x524 <__fixunssfsi+0x5c>
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__floatunsisf>:
 526:	e8 94       	clt
 528:	09 c0       	rjmp	.+18     	; 0x53c <__floatsisf+0x12>

0000052a <__floatsisf>:
 52a:	97 fb       	bst	r25, 7
 52c:	3e f4       	brtc	.+14     	; 0x53c <__floatsisf+0x12>
 52e:	90 95       	com	r25
 530:	80 95       	com	r24
 532:	70 95       	com	r23
 534:	61 95       	neg	r22
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	99 23       	and	r25, r25
 53e:	a9 f0       	breq	.+42     	; 0x56a <__floatsisf+0x40>
 540:	f9 2f       	mov	r31, r25
 542:	96 e9       	ldi	r25, 0x96	; 150
 544:	bb 27       	eor	r27, r27
 546:	93 95       	inc	r25
 548:	f6 95       	lsr	r31
 54a:	87 95       	ror	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b7 95       	ror	r27
 552:	f1 11       	cpse	r31, r1
 554:	f8 cf       	rjmp	.-16     	; 0x546 <__floatsisf+0x1c>
 556:	fa f4       	brpl	.+62     	; 0x596 <__floatsisf+0x6c>
 558:	bb 0f       	add	r27, r27
 55a:	11 f4       	brne	.+4      	; 0x560 <__floatsisf+0x36>
 55c:	60 ff       	sbrs	r22, 0
 55e:	1b c0       	rjmp	.+54     	; 0x596 <__floatsisf+0x6c>
 560:	6f 5f       	subi	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	16 c0       	rjmp	.+44     	; 0x596 <__floatsisf+0x6c>
 56a:	88 23       	and	r24, r24
 56c:	11 f0       	breq	.+4      	; 0x572 <__floatsisf+0x48>
 56e:	96 e9       	ldi	r25, 0x96	; 150
 570:	11 c0       	rjmp	.+34     	; 0x594 <__floatsisf+0x6a>
 572:	77 23       	and	r23, r23
 574:	21 f0       	breq	.+8      	; 0x57e <__floatsisf+0x54>
 576:	9e e8       	ldi	r25, 0x8E	; 142
 578:	87 2f       	mov	r24, r23
 57a:	76 2f       	mov	r23, r22
 57c:	05 c0       	rjmp	.+10     	; 0x588 <__floatsisf+0x5e>
 57e:	66 23       	and	r22, r22
 580:	71 f0       	breq	.+28     	; 0x59e <__floatsisf+0x74>
 582:	96 e8       	ldi	r25, 0x86	; 134
 584:	86 2f       	mov	r24, r22
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	2a f0       	brmi	.+10     	; 0x596 <__floatsisf+0x6c>
 58c:	9a 95       	dec	r25
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	da f7       	brpl	.-10     	; 0x58c <__floatsisf+0x62>
 596:	88 0f       	add	r24, r24
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret

000005a0 <__fp_inf>:
 5a0:	97 f9       	bld	r25, 7
 5a2:	9f 67       	ori	r25, 0x7F	; 127
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	08 95       	ret

000005ac <__fp_nan>:
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	80 ec       	ldi	r24, 0xC0	; 192
 5b0:	08 95       	ret

000005b2 <__fp_pscA>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	09 06       	cpc	r0, r25
 5be:	08 95       	ret

000005c0 <__fp_pscB>:
 5c0:	00 24       	eor	r0, r0
 5c2:	0a 94       	dec	r0
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	14 06       	cpc	r1, r20
 5ca:	05 06       	cpc	r0, r21
 5cc:	08 95       	ret

000005ce <__fp_round>:
 5ce:	09 2e       	mov	r0, r25
 5d0:	03 94       	inc	r0
 5d2:	00 0c       	add	r0, r0
 5d4:	11 f4       	brne	.+4      	; 0x5da <__fp_round+0xc>
 5d6:	88 23       	and	r24, r24
 5d8:	52 f0       	brmi	.+20     	; 0x5ee <__fp_round+0x20>
 5da:	bb 0f       	add	r27, r27
 5dc:	40 f4       	brcc	.+16     	; 0x5ee <__fp_round+0x20>
 5de:	bf 2b       	or	r27, r31
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_round+0x18>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <__fp_round+0x20>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <__fp_split3>:
 5f0:	57 fd       	sbrc	r21, 7
 5f2:	90 58       	subi	r25, 0x80	; 128
 5f4:	44 0f       	add	r20, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	59 f0       	breq	.+22     	; 0x610 <__fp_splitA+0x10>
 5fa:	5f 3f       	cpi	r21, 0xFF	; 255
 5fc:	71 f0       	breq	.+28     	; 0x61a <__fp_splitA+0x1a>
 5fe:	47 95       	ror	r20

00000600 <__fp_splitA>:
 600:	88 0f       	add	r24, r24
 602:	97 fb       	bst	r25, 7
 604:	99 1f       	adc	r25, r25
 606:	61 f0       	breq	.+24     	; 0x620 <__fp_splitA+0x20>
 608:	9f 3f       	cpi	r25, 0xFF	; 255
 60a:	79 f0       	breq	.+30     	; 0x62a <__fp_splitA+0x2a>
 60c:	87 95       	ror	r24
 60e:	08 95       	ret
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	55 1f       	adc	r21, r21
 618:	f2 cf       	rjmp	.-28     	; 0x5fe <__fp_split3+0xe>
 61a:	46 95       	lsr	r20
 61c:	f1 df       	rcall	.-30     	; 0x600 <__fp_splitA>
 61e:	08 c0       	rjmp	.+16     	; 0x630 <__fp_splitA+0x30>
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	18 06       	cpc	r1, r24
 626:	99 1f       	adc	r25, r25
 628:	f1 cf       	rjmp	.-30     	; 0x60c <__fp_splitA+0xc>
 62a:	86 95       	lsr	r24
 62c:	71 05       	cpc	r23, r1
 62e:	61 05       	cpc	r22, r1
 630:	08 94       	sec
 632:	08 95       	ret

00000634 <__fp_zero>:
 634:	e8 94       	clt

00000636 <__fp_szero>:
 636:	bb 27       	eor	r27, r27
 638:	66 27       	eor	r22, r22
 63a:	77 27       	eor	r23, r23
 63c:	cb 01       	movw	r24, r22
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__muluhisi3>:
 642:	0e 94 2c 03 	call	0x658	; 0x658 <__umulhisi3>
 646:	a5 9f       	mul	r26, r21
 648:	90 0d       	add	r25, r0
 64a:	b4 9f       	mul	r27, r20
 64c:	90 0d       	add	r25, r0
 64e:	a4 9f       	mul	r26, r20
 650:	80 0d       	add	r24, r0
 652:	91 1d       	adc	r25, r1
 654:	11 24       	eor	r1, r1
 656:	08 95       	ret

00000658 <__umulhisi3>:
 658:	a2 9f       	mul	r26, r18
 65a:	b0 01       	movw	r22, r0
 65c:	b3 9f       	mul	r27, r19
 65e:	c0 01       	movw	r24, r0
 660:	a3 9f       	mul	r26, r19
 662:	70 0d       	add	r23, r0
 664:	81 1d       	adc	r24, r1
 666:	11 24       	eor	r1, r1
 668:	91 1d       	adc	r25, r1
 66a:	b2 9f       	mul	r27, r18
 66c:	70 0d       	add	r23, r0
 66e:	81 1d       	adc	r24, r1
 670:	11 24       	eor	r1, r1
 672:	91 1d       	adc	r25, r1
 674:	08 95       	ret

00000676 <_exit>:
 676:	f8 94       	cli

00000678 <__stop_program>:
 678:	ff cf       	rjmp	.-2      	; 0x678 <__stop_program>
